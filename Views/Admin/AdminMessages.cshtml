@{
    ViewData["Title"] = "Admin Messages - EliteRentals";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid">
    <div class="row">
        @await Html.PartialAsync("_AdminSidebar")

        <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4 py-4">
            <div class="row mb-3">
                <div class="col-md-3">
                    <div class="list-group">
                        <a href="#" class="list-group-item list-group-item-action active folder-link" data-folder="inbox">Inbox</a>
                        <a href="#" class="list-group-item list-group-item-action folder-link" data-folder="sent">Sent</a>
                        <a href="#" class="list-group-item list-group-item-action folder-link" data-folder="trash">Trash</a>
                    </div>
                    <button class="btn btn-primary mt-3 w-100" data-bs-toggle="modal" data-bs-target="#composeMessageModal">Compose</button>
                </div>

                <div class="col-md-9">
                    <h2 class="h3 pb-2 mb-3 border-bottom" id="folderTitle">Inbox</h2>
                    <div class="card shadow-sm">
                        <div class="card-body p-0">
                            <ul class="list-group" id="messagesList"></ul>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>
</div>

<!-- Compose Modal -->
<div class="modal fade" id="composeMessageModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Compose New Message</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="composeForm">
                    <div class="mb-3">
                        <input type="text" class="form-control" id="composeRecipient" placeholder="Recipient" required>
                    </div>
                    <div class="mb-3">
                        <textarea class="form-control" id="composeContent" rows="4" placeholder="Write your message..." required></textarea>
                    </div>
                    <button type="submit" class="btn btn-primary">Send</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- View Modal -->
<div class="modal fade" id="viewMessageModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Message from <span id="modalTenantName"></span></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p id="modalMessageContent"></p>
            </div>
            <div class="modal-footer" id="modalFooter"></div>
        </div>
    </div>
</div>

<!-- Reply Modal -->
<div class="modal fade" id="replyMessageModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Reply to <span id="replyTenantName"></span></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="replyForm">
                    <div class="mb-3">
                        <textarea class="form-control" id="replyContent" rows="4" placeholder="Write your reply..." required></textarea>
                    </div>
                    <button type="submit" class="btn btn-success">Send Reply</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Mock data with read/unread
        let inboxMessages = [
            {id:1, sender:"Tenant 1", content:"Water issue - Please fix the tap.", date:"08/09/2025", read:false},
            {id:2, sender:"Tenant 2", content:"Rent payment query.", date:"07/09/2025", read:true},
            {id:3, sender:"Tenant 3", content:"Internet not working.", date:"06/09/2025", read:false},
        ];
        let sentMessages = [
            {id:1, sender:"Admin", content:"Reminder - Rent is due.", date:"06/09/2025"},
            {id:2, sender:"Admin", content:"Notice - Pool maintenance tomorrow.", date:"05/09/2025"},
        ];
        let trashMessages = [
            {id:1, sender:"Tenant 4", content:"Noise complaint.", date:"03/09/2025"},
        ];

        let currentFolder = 'inbox';
        let selectedMessage = null;

        function renderMessages(){
            const list = document.getElementById('messagesList');
            list.innerHTML = '';

            let messages;
            if(currentFolder==='inbox') messages=inboxMessages;
            else if(currentFolder==='sent') messages=sentMessages;
            else messages=trashMessages;

            messages.forEach(msg=>{
                const li = document.createElement('li');
                li.className = 'list-group-item d-flex justify-content-between align-items-center';
                li.dataset.id = msg.id;

                const isUnread = currentFolder==='inbox' && !msg.read;

                li.innerHTML = `
                    <div class="d-flex align-items-center message-item">
                        <div class="read-dot" style="width:12px; height:12px; border-radius:50%; background:${isUnread?'#0d6efd':'#6c757d'}; margin-right:8px; cursor:pointer;"></div>
                        <div>
                            <div class="fw-bold ${isUnread?'':'fw-normal'}">${msg.sender}</div>
                            <div class="text-truncate" style="max-width:300px;">${msg.content}</div>
                        </div>
                    </div>
                    <div class="d-flex align-items-center actions">
                        <span class="me-2 text-muted">${msg.date}</span>
                    </div>
                `;

                const dot = li.querySelector('.read-dot');
                dot.addEventListener('click', ()=>{
                    if(currentFolder==='inbox'){
                        msg.read = !msg.read;
                        renderMessages();
                    }
                });

                const actionsDiv = li.querySelector('.actions');

                if(currentFolder==='inbox'){
                    const viewBtn = document.createElement('button'); viewBtn.className='btn btn-sm btn-info me-1 view-btn'; viewBtn.innerText='View';
                    const replyBtn = document.createElement('button'); replyBtn.className='btn btn-sm btn-success me-1 reply-btn'; replyBtn.innerText='Reply';
                    const deleteBtn = document.createElement('button'); deleteBtn.className='btn btn-sm btn-danger delete-btn'; deleteBtn.innerText='Delete';
                    actionsDiv.append(viewBtn, replyBtn, deleteBtn);

                    viewBtn.addEventListener('click',()=>openView(msg));
                    replyBtn.addEventListener('click',()=>openReply(msg));
                    deleteBtn.addEventListener('click',()=>{moveToTrash(msg.id);});
                }else if(currentFolder==='sent'){
                    const viewBtn = document.createElement('button'); viewBtn.className='btn btn-sm btn-info me-1 view-btn'; viewBtn.innerText='View';
                    const deleteBtn = document.createElement('button'); deleteBtn.className='btn btn-sm btn-danger delete-btn'; deleteBtn.innerText='Delete';
                    actionsDiv.append(viewBtn, deleteBtn);

                    viewBtn.addEventListener('click',()=>openView(msg));
                    deleteBtn.addEventListener('click',()=>{moveToTrash(msg.id);});
                }else if(currentFolder==='trash'){
                    const viewBtn = document.createElement('button'); viewBtn.className='btn btn-sm btn-info me-1 view-btn'; viewBtn.innerText='View';
                    const recoverBtn = document.createElement('button'); recoverBtn.className='btn btn-sm btn-success me-1 recover-btn'; recoverBtn.innerText='Recover';
                    const deleteBtn = document.createElement('button'); deleteBtn.className='btn btn-sm btn-danger permanent-delete-btn'; deleteBtn.innerText='Delete Permanently';
                    actionsDiv.append(viewBtn, recoverBtn, deleteBtn);

                    viewBtn.addEventListener('click',()=>openView(msg));
                    recoverBtn.addEventListener('click',()=>recover(msg.id));
                    deleteBtn.addEventListener('click',()=>permanentDelete(msg.id));
                }

                list.appendChild(li);
            });
        }

        function openView(msg){
            selectedMessage = msg;
            document.getElementById('modalTenantName').innerText = msg.sender;
            document.getElementById('modalMessageContent').innerText = msg.content;

            // mark as read
            if(currentFolder==='inbox') msg.read=true;
            renderMessages();

            const footer = document.getElementById('modalFooter');
            footer.innerHTML = '';

            if(currentFolder==='inbox'){
                const replyBtn = document.createElement('button'); replyBtn.className='btn btn-success'; replyBtn.innerText='Reply';
                replyBtn.addEventListener('click',()=>openReply(msg));
                const closeBtn = document.createElement('button'); closeBtn.className='btn btn-secondary'; closeBtn.setAttribute('data-bs-dismiss','modal'); closeBtn.innerText='Close';
                footer.append(replyBtn, closeBtn);
            } else {
                const closeBtn = document.createElement('button'); closeBtn.className='btn btn-secondary'; closeBtn.setAttribute('data-bs-dismiss','modal'); closeBtn.innerText='Close';
                footer.append(closeBtn);
            }

            new bootstrap.Modal(document.getElementById('viewMessageModal')).show();
        }

        function openReply(msg){
            selectedMessage = msg;
            document.getElementById('replyTenantName').innerText = msg.sender;
            document.getElementById('replyContent').value = '';
            new bootstrap.Modal(document.getElementById('replyMessageModal')).show();
        }

        function moveToTrash(id){
            if(currentFolder==='inbox'){
                const idx = inboxMessages.findIndex(m=>m.id===id);
                trashMessages.push(inboxMessages[idx]);
                inboxMessages.splice(idx,1);
            } else if(currentFolder==='sent'){
                const idx = sentMessages.findIndex(m=>m.id===id);
                trashMessages.push(sentMessages[idx]);
                sentMessages.splice(idx,1);
            }
            renderMessages();
        }

        function recover(id){
            const idx = trashMessages.findIndex(m=>m.id===id);
            const msg = trashMessages[idx];
            if(msg.sender==='Admin') sentMessages.push(msg);
            else inboxMessages.push(msg);
            trashMessages.splice(idx,1);
            renderMessages();
        }

        function permanentDelete(id){
            const idx = trashMessages.findIndex(m=>m.id===id);
            trashMessages.splice(idx,1);
            renderMessages();
        }

        // Folder switching
        document.querySelectorAll('.folder-link').forEach(link=>{
            link.addEventListener('click', e=>{
                e.preventDefault();
                document.querySelectorAll('.folder-link').forEach(l=>l.classList.remove('active'));
                link.classList.add('active');
                currentFolder = link.dataset.folder;
                document.getElementById('folderTitle').innerText = link.innerText;
                renderMessages();
            });
        });

        // Reply form submit
        document.getElementById('replyForm').addEventListener('submit', function(e){
            e.preventDefault();
            alert('Reply sent: ' + document.getElementById('replyContent').value);
            bootstrap.Modal.getInstance(document.getElementById('replyMessageModal')).hide();
        });

        // Compose form submit
        document.getElementById('composeForm').addEventListener('submit', function(e){
            e.preventDefault();
            const recipient = document.getElementById('composeRecipient').value;
            const content = document.getElementById('composeContent').value;
            const date = new Date().toLocaleDateString('en-GB');

            sentMessages.push({id:Date.now(), sender:"Admin", content:content, date:date});
            bootstrap.Modal.getInstance(document.getElementById('composeMessageModal')).hide();
            alert('Message sent to ' + recipient);
            renderMessages();
        });

        renderMessages();
    </script>
}
