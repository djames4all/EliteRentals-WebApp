@{
    ViewData["Title"] = "Admin Chatbot - EliteRentals";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid">
    <div class="row">
        @await Html.PartialAsync("_AdminSidebar")

        <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4 py-4">
            <h2 class="h3 pb-2 mb-3 border-bottom">AI Chatbot Assistant</h2>

            <div class="row mb-3">
                <!-- Chat requests panel -->
                <div class="col-md-4">
                    <h5>Escalated Chat Requests</h5>
                    <ul class="list-group" id="chatRequestsList"></ul>
                </div>

                <!-- Chat window panel -->
                <div class="col-md-8">
                    <div class="card shadow-sm mb-3">
                        <div class="card-body" style="height:400px; overflow-y:auto;" id="chatWindow">
                            <p class="text-muted text-center mt-5" id="noChatText">Select a chat request to view conversation</p>
                        </div>
                    </div>

                    <div class="input-group mb-3">
                        <input type="text" class="form-control" placeholder="Type your reply..." id="chatInput" disabled>
                        <button class="btn btn-primary" id="sendBtn" disabled>Send</button>
                    </div>

                    <div class="mb-3">
                        <label for="chatStatus" class="form-label">Status</label>
                        <select id="chatStatus" class="form-select" disabled>
                            <option>Pending</option>
                            <option>In Progress</option>
                            <option>Resolved</option>
                        </select>
                    </div>
                </div>
            </div>
        </main>
    </div>
</div>

<script>
    const chatRequests = [
        {id:1,user:"Tenant 1",status:"Pending",history:[
            {sender:"User",message:"Hi, I cannot access my account.",time:"08/09/2025 10:00"},
            {sender:"Chatbot",message:"Have you tried resetting your password?",time:"08/09/2025 10:01"},
            {sender:"User",message:"Yes, but it still doesn't work.",time:"08/09/2025 10:03"}
        ]},
        {id:2,user:"Tenant 2",status:"In Progress",history:[
            {sender:"User",message:"I need help with my rent payment.",time:"07/09/2025 09:15"},
            {sender:"Chatbot",message:"The payment portal is currently down, try later.",time:"07/09/2025 09:16"}
        ]},
        {id:3,user:"Tenant 3",status:"Pending",history:[
            {sender:"User",message:"The water is leaking in the kitchen.",time:"06/09/2025 14:20"}
        ]}
    ];

    let selectedChat = null;
    const chatRequestsList = document.getElementById('chatRequestsList');
    const chatWindow = document.getElementById('chatWindow');
    const chatInput = document.getElementById('chatInput');
    const sendBtn = document.getElementById('sendBtn');
    const chatStatus = document.getElementById('chatStatus');
    const noChatText = document.getElementById('noChatText');

    // Render chat requests once
    chatRequests.forEach(chat=>{
        const li = document.createElement('li');
        li.className = 'list-group-item d-flex justify-content-between align-items-center';
        li.dataset.id = chat.id;
        li.innerHTML = `<div><strong>${chat.user}</strong><br/><small class="chat-status">${chat.status}</small></div>
                        <span class="badge ${chat.status==='Resolved'?'bg-success':chat.status==='In Progress'?'bg-warning text-dark':'bg-secondary'} chat-badge">${chat.status}</span>`;
        chatRequestsList.appendChild(li);
    });

    // Delegated click for all li elements
    chatRequestsList.addEventListener('click', e=>{
        const li = e.target.closest('li');
        if(!li) return;
        const chatId = parseInt(li.dataset.id);
        selectChat(chatId);
    });

    // Select chat
    function selectChat(id){
        selectedChat = chatRequests.find(c=>c.id===id);
        chatWindow.innerHTML = '';
        noChatText.style.display = 'none';

        selectedChat.history.forEach(msg=>{
            const msgDiv = document.createElement('div');
            msgDiv.classList.add('mb-2');
            if(msg.sender==='User'){
                msgDiv.classList.add('text-start','bg-light','p-2','rounded','mb-2');
            } else {
                msgDiv.classList.add('text-end','bg-primary','text-white','p-2','rounded','mb-2');
            }
            msgDiv.innerHTML = `<small>${msg.time}</small><br>${msg.sender}: ${msg.message}`;
            chatWindow.appendChild(msgDiv);
        });

        chatInput.disabled = false;
        sendBtn.disabled = false;
        chatStatus.disabled = false;
        chatStatus.value = selectedChat.status;

        chatWindow.scrollTop = chatWindow.scrollHeight;
    }

    // Send message
    sendBtn.addEventListener('click', ()=>{
        const msg = chatInput.value.trim();
        if(!msg || !selectedChat) return;

        const now = new Date();
        const time = now.toLocaleDateString('en-GB') + " " + now.toLocaleTimeString('en-GB',{hour:'2-digit',minute:'2-digit'});
        const newMsg = {sender:"Admin",message:msg,time:time};
        selectedChat.history.push(newMsg);

        const msgDiv = document.createElement('div');
        msgDiv.classList.add('mb-2','text-end','bg-primary','text-white','p-2','rounded');
        msgDiv.innerHTML = `<small>${time}</small><br>Admin: ${msg}`;
        chatWindow.appendChild(msgDiv);

        chatInput.value = '';
        chatWindow.scrollTop = chatWindow.scrollHeight;
    });

    // Update status
    chatStatus.addEventListener('change', ()=>{
        if(!selectedChat) return;
        selectedChat.status = chatStatus.value;

        const li = chatRequestsList.querySelector(`li[data-id='${selectedChat.id}']`);
        li.querySelector('.chat-status').textContent = selectedChat.status;
        const badge = li.querySelector('.chat-badge');
        badge.textContent = selectedChat.status;
        badge.className = 'badge chat-badge ' + (selectedChat.status==='Resolved'?'bg-success':selectedChat.status==='In Progress'?'bg-warning text-dark':'bg-secondary');
    });
</script>
