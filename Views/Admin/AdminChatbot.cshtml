@{
    ViewData["Title"] = "Admin Chatbot";
    Layout = "_Layout";
}

<section class="container py-4">
  <div class="d-flex align-items-center justify-content-between mb-3">
    <h2 class="m-0">Admin Chatbot</h2>
    <small class="text-muted">Hardcoded intents • Live data via API</small>
  </div>

  <div id="chat" class="border rounded p-3 mb-3" style="height:420px;overflow-y:auto;background:#fafafa;">
    <div class="bot mb-2 bubble"><strong>Bot:</strong> Hi! Try <em>“maintenance summary”</em>, <em>“overdue payments”</em>, <em>“property stats”</em>, or <em>“leases expiring”</em>.</div>
  </div>

  <div class="d-flex gap-2 mb-2 flex-wrap">
    <button class="btn btn-sm btn-outline-secondary quick">maintenance summary</button>
    <button class="btn btn-sm btn-outline-secondary quick">overdue payments</button>
    <button class="btn btn-sm btn-outline-secondary quick">property stats</button>
    <button class="btn btn-sm btn-outline-secondary quick">leases expiring</button>
    <button class="btn btn-sm btn-outline-secondary quick">broadcast to tenants</button>
  </div>

  <form id="chat-form" class="d-flex gap-2" autocomplete="off">
    @Html.AntiForgeryToken()
    <input id="msg" class="form-control" placeholder="Type a message…" />
    <button id="sendBtn" class="btn btn-primary" type="submit">Send</button>
  </form>
</section>

@section Scripts{
<script>
(function(){
  const chat  = document.getElementById('chat');
  // Server-side URLs substituted into bot HTML
  const MAINT_URL = '@Url.Action("AdminMaintenance","Admin")';
  const PAY_URL   = '@Url.Action("AdminPayments","Admin")';
  const PROP_URL  = '@Url.Action("AdminProperties","Admin")';
  const LEASE_URL = '@Url.Action("AdminLeases","Admin")';
  const BC_URL    = '@Url.Action("AdminChatbotBroadcast","Admin")';
  const MSG_URL   = '@Url.Action("AdminMessages","Admin")';

  const form  = document.getElementById('chat-form');
  const input = document.getElementById('msg');
  const send  = document.getElementById('sendBtn');

  function escapeHtml(s){
    return (s ?? '').replace(/[&<>"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[m]));
  }
  function addText(role, text){
    const div = document.createElement('div');
    div.className = (role === 'bot' ? 'bot' : 'me') + ' mb-2 bubble';
    div.innerHTML = `<strong>${role==='bot'?'Bot':'You'}:</strong> ${escapeHtml(text ?? '')}`;
    chat.appendChild(div);
    chat.scrollTop = chat.scrollHeight;
  }
  function addHtml(html){
    // Replace tokens from controller with real, server-generated URLs
    let h = String(html ?? '');
    h = h.replaceAll('__MAINT_URL__', MAINT_URL);
    h = h.replaceAll('__PAY_URL__',   PAY_URL);
    h = h.replaceAll('__PROP_URL__',  PROP_URL);
    h = h.replaceAll('__LEASE_URL__', LEASE_URL);
    h = h.replaceAll('__MSG_URL__',   MSG_URL);

    const div = document.createElement('div');
    div.className = 'bot mb-2 bubble';
    div.innerHTML = h;
    chat.appendChild(div);
    chat.scrollTop = chat.scrollHeight;
  }
  function addTyping(){
    const div = document.createElement('div');
    div.className = 'bot mb-2 bubble typing';
    div.innerHTML = `<strong>Bot:</strong> <span class="dots"><span>.</span><span>.</span><span>.</span></span>`;
    chat.appendChild(div);
    chat.scrollTop = chat.scrollHeight;
    return div;
  }

  // Quick chips
  document.querySelectorAll('.quick').forEach(b=>{
    b.addEventListener('click', ()=>{
      input.value = b.textContent.trim();
      form.requestSubmit();
    });
  });

  // Main chat submit
  form.addEventListener('submit', async (e)=>{
    e.preventDefault();
    const text = (input.value || '').trim();
    if(!text) return;

    addText('me', text);
    input.value = '';
    input.focus();

    const typing = addTyping();
    send.disabled = true;

    try{
      const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
      const res = await fetch('@Url.Action("AdminChatbotAsk","Admin")', {
        method:'POST',
        headers:{ 'Content-Type':'application/json', 'RequestVerificationToken': token },
        body: JSON.stringify({ text })
      });

      typing.remove();

      if(!res.ok){
        addText('bot', 'Sorry — the server didn’t like that request.');
        return;
      }

      const data = await res.json();
      if (data.isHtml && data.html){
        addHtml(data.html);
      } else {
        addText('bot', data.reply ?? 'Hmm, I had trouble answering that.');
      }
    }catch(err){
      typing.remove();
      addText('bot', 'Sorry — something went wrong connecting to the server.');
    }finally{
      send.disabled = false;
    }
  });

  // In-chat broadcast form submit (event delegation)
  chat.addEventListener('submit', async (e)=>{
    const target = e.target;
    if (!target || target.id !== 'bc-form') return;
    e.preventDefault();

    const fd = new FormData(target);
    const audience = (fd.get('audience') || 'All').toString();
    const text     = (fd.get('text') || '').toString().trim();
    if(!text){
      alert('Please enter a message');
      return;
      }

    try{
      const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
      const res = await fetch(BC_URL, {
        method:'POST',
        headers:{ 'Content-Type':'application/json', 'RequestVerificationToken': token },
        body: JSON.stringify({ audience, text })
      });
      if(!res.ok){
        addText('bot', 'Broadcast failed.');
        return;
      }
      addText('bot', 'Broadcast sent ✅');
      // Optionally remove the form after success
      target.remove();
    }catch(err){
      addText('bot', 'Broadcast failed (network).');
    }
  });
})();
</script>
<style>
.bubble{ padding:.5rem .75rem; border-radius:.5rem; }
#chat .bot{ background:#eef6ff; }
#chat .me { background:#fff; border:1px solid #eee; }
.typing .dots span{ animation: blink 1.4s infinite both; display:inline-block; }
.typing .dots span:nth-child(2){ animation-delay:.2s; }
.typing .dots span:nth-child(3){ animation-delay:.4s; }
@@keyframes blink{ 0%,80%,100%{opacity:0} 40%{opacity:1} }
</style>
}
