@model AdminDashboardViewModel
@{
    ViewData["Title"] = "Admin Dashboard - EliteRentals";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid">
    <div class="row">
        @await Html.PartialAsync("_AdminSidebar")

        <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4 py-4">
            <div class="d-flex justify-content-between align-items-center pb-2 mb-3 border-bottom">
                <h2 class="h3">Admin Dashboard</h2>
            </div>

            <!-- KPI Cards -->
            <div class="row mb-4">
                <div class="col-md-3 mb-3">
                    <div class="card text-center shadow-sm">
                        <div class="card-body">
                            <h6 class="card-title text-muted">Occupancy Rate</h6>
                            <p class="display-6 text-success fw-bold">@Model.OccupancyRate%</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3 mb-3">
                    <div class="card text-center shadow-sm">
                        <div class="card-body">
                            <h6 class="card-title text-muted">Overdue Payments</h6>
                            <p class="display-6 text-danger fw-bold">@($"R{Model.OverduePayments:N2}")</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3 mb-3">
                    <div class="card text-center shadow-sm">
                        <div class="card-body">
                            <h6 class="card-title text-muted">Active Maintenance</h6>
                            <p class="display-6 text-warning fw-bold">@Model.ActiveMaintenance</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3 mb-3">
                    <div class="card text-center shadow-sm">
                        <div class="card-body">
                            <h6 class="card-title text-muted">Pending Requests</h6>
                            <p class="display-6 text-primary fw-bold">@Model.PendingRequests</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Recent Activities Table -->
            <div class="card shadow-sm mb-4">
                <div class="card-body">
                    <h5 class="card-title mb-3">Recent Activities</h5>
                    <div class="table-responsive">
                        <table class="table table-hover align-middle">
                            <thead>
                                <tr>
                                    <th>Tenant</th>
                                    <th>Property</th>
                                    <th>Action</th>
                                    <th>Date</th>
                                    <th>Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var act in Model.RecentActivities)
                                {
                                    <tr>
                                        <td>@(!string.IsNullOrEmpty(act.Tenant) ? act.Tenant : "Unknown Tenant")</td>
                                        <td>@(!string.IsNullOrEmpty(act.Property) ? act.Property : "Unknown Property")</td>
                                        <td>@act.Action</td>
                                        <td>@act.Date.ToString("dd/MM/yyyy")</td>
                                        <td>
                                            @{
                                                var badgeClass = act.Action == "Payment"
                                                ? (act.Status?.Equals("Paid", StringComparison.OrdinalIgnoreCase) == true ? "bg-success" : "bg-warning text-dark")
                                                : (act.Status?.Equals("Pending", StringComparison.OrdinalIgnoreCase) == true ? "bg-warning text-dark" : "bg-primary");
                                            }
                                            <span class="badge @badgeClass">@((act.Status ?? "Unknown"))</span>

                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Charts -->
            <div class="row mb-4">
                <div class="col-lg-6 mb-3">
                    <div class="card shadow-sm">
                        <div class="card-body">
                            <h5 class="card-title">Rent Trends</h5>
                            <canvas id="rentTrendsChart"></canvas>
                        </div>
                    </div>
                </div>
                <div class="col-lg-6 mb-3">
                    <div class="card shadow-sm">
                        <div class="card-body">
                            <h5 class="card-title">Lease Expiration Timeline</h5>
                            <canvas id="leaseExpirationChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>

        </main>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Safely handle empty datasets
        const rentData = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.RentTrends.Select(r => r.Amount)));
        const rentLabels = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.RentTrends.Select(r => r.Month)));


        new Chart(document.getElementById('rentTrendsChart').getContext('2d'), {
            type: 'line',
            data: {
                labels: rentLabels,
                datasets: [{
                    label: 'Rent Collected',
                    data: rentData,
                    borderColor: '#0d6efd',
                    backgroundColor: 'rgba(13,110,253,0.2)',
                    fill: true,
                    tension: 0.4
                }]
            },
            options: {
                responsive: true,
                plugins: { legend: { display: true, position: 'top' } },
                scales: { y: { beginAtZero: true } }
            }
        });

        const leaseData = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.LeaseExpirations.Select(l => l.Count)));
        const leaseLabels = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.LeaseExpirations.Select(l => l.Month ?? "")));

        new Chart(document.getElementById('leaseExpirationChart').getContext('2d'), {
            type: 'bar',
            data: {
                labels: leaseLabels,
                datasets: [{
                    label: 'Expiring Leases',
                    data: leaseData,
                    backgroundColor: 'rgba(255, 193, 7, 0.7)',
                    borderColor: 'rgba(255, 193, 7, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: { legend: { display: true, position: 'top' } },
                scales: { y: { beginAtZero: true, precision: 0 } }
            }
        });
    </script>
}
